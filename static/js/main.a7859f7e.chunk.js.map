{"version":3,"sources":["Chat.js","index.js"],"names":["Chat","_useState","useState","_useState2","_slicedToArray","userMessage","setUserMessage","_useState3","_useState4","chatMessages","setChatMessages","_useState5","_useState6","isButtonClicked","setIsButtonClicked","chatContainerRef","useRef","fetchBotMessage","useCallback","fetch","concat","then","response","text","data","botMessage","message","isBot","prevChatMessages","_toConsumableArray","slice","catch","error","console","useEffect","current","scrollTop","scrollHeight","formatMessage","split","map","snippet","index","languageMatch","match","language","cleanedSnippet","replace","highlightedSnippet","hljs","highlightAuto","value","_jsxs","style","position","backgroundColor","border","borderRadius","padding","marginBottom","children","_jsx","overflowX","whiteSpace","wordWrap","dangerouslySetInnerHTML","__html","FiCopy","cursor","right","top","color","fontSize","onClick","navigator","clipboard","writeText","line","i","React","Fragment","theme","getTheme","classNames","mergeStyleSets","title","fontWeight","palette","themePrimary","inputContainer","width","display","alignItems","inputBox","flexGrow","marginRight","Stack","horizontalAlign","verticalAlign","verticalFill","styles","root","height","margin","textAlign","background","gap","Text","className","Item","flexDirection","overflow","ref","justifyContent","horizontal","FiTrash2","redDark","alignSelf","TextField","onChange","event","target","autoComplete","autoFocus","multiline","resizable","underlined","placeholder","FiSend","rootElement","document","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.a7859f7e.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport {\n  Stack,\n  Text,\n  TextField,\n  getTheme,\n  mergeStyleSets\n} from \"@fluentui/react\";\nimport { useBoolean } from \"@uifabric/react-hooks\";\nimport hljs from \"highlight.js\";\nimport \"highlight.js/styles/github.css\";\nimport { FiSend, FiTrash2, FiCopy } from \"react-icons/fi\";\n\nconst Chat = () => {\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([]);\n  const [isButtonClicked, setIsButtonClicked] = useState(false);\n  const chatContainerRef = useRef(null);\n\n  const handleUserMessageChange = (event) => {\n    setUserMessage(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (userMessage) {\n      const botMessage = { message: \"Typing...\", isBot: true };\n      setChatMessages((prevChatMessages) => [\n        ...prevChatMessages,\n        { message: userMessage, isBot: false },\n        botMessage\n      ]);\n      setIsButtonClicked(true);\n    }\n  };\n\n  const fetchBotMessage = useCallback(() => {\n    fetch(`https://walrus-app-hodhq.ondigitalocean.app/ultron?q=${userMessage}`)\n      .then((response) => response.text())\n      .then((data) => {\n        const botMessage = { message: data, isBot: true };\n        setChatMessages((prevChatMessages) => [\n          ...prevChatMessages.slice(0, -1),\n          botMessage\n        ]);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [userMessage]);\n\n  useEffect(() => {\n    if (isButtonClicked) {\n      fetchBotMessage();\n      setIsButtonClicked(false);\n      setUserMessage(\"\");\n    }\n  }, [isButtonClicked, fetchBotMessage]);\n\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop =\n        chatContainerRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  // const formatMessage = (message) => {\n  //   return message.split(\"```\").map((snippet, index) => {\n  //     if (index % 2 === 1) {\n  //       const languageMatch = snippet.match(/^(\\w+)\\n/);\n  //       const language = languageMatch ? languageMatch[1] : null;\n  //       const cleanedSnippet = snippet.replace(/^\\w+\\n/, \"\");\n  //       const highlightedSnippet = hljs.highlightAuto(\n  //         cleanedSnippet,\n  //         language ? [language] : null\n  //       ).value;\n  //       return (\n  //         <div\n  //           key={index}\n  //           style={{\n  //             position: \"relative\",\n  //             backgroundColor: \"#f1f1f1\",\n  //             border: \"1px solid #ccc\",\n  //             borderRadius: \"3px\",\n  //             padding: \"8px\",\n  //             marginBottom: \"8px\"\n  //           }}\n  //         >\n  //           <pre\n  //             style={{\n  //               overflowX: \"auto\",\n  //               whiteSpace: \"pre-wrap\",\n  //               wordWrap: \"break-word\"\n  //             }}\n  //             dangerouslySetInnerHTML={{ __html: highlightedSnippet }}\n  //           ></pre>\n  //           <FiCopy\n  //             style={{\n  //               cursor: \"pointer\",\n  //               position: \"absolute\",\n  //               right: \"8px\",\n  //               top: \"8px\",\n  //               color: \"#0078d4\",\n  //               fontSize: \"1.2rem\"\n  //             }}\n  //             onClick={() => {\n  //               navigator.clipboard.writeText(cleanedSnippet);\n  //             }}\n  //           />\n  //         </div>\n  //       );\n  //     } else {\n  //       return <span key={index}>{snippet.replace(/\\n/g, <br />)}</span>;\n  //     }\n  //   });\n  // };\n  const formatMessage = (message) => {\n    return message.split(\"```\").map((snippet, index) => {\n      if (index % 2 === 1) {\n        const languageMatch = snippet.match(/^(\\w+)\\n/);\n        const language = languageMatch ? languageMatch[1] : null;\n        const cleanedSnippet = snippet.replace(/^\\w+\\n/, \"\");\n        const highlightedSnippet = hljs.highlightAuto(\n          cleanedSnippet,\n          language ? [language] : null\n        ).value;\n        return (\n          <div\n            key={index}\n            style={{\n              position: \"relative\",\n              backgroundColor: \"#f1f1f1\",\n              border: \"1px solid #ccc\",\n              borderRadius: \"3px\",\n              padding: \"8px\",\n              marginBottom: \"8px\"\n            }}\n          >\n            <pre\n              style={{\n                overflowX: \"auto\",\n                whiteSpace: \"pre-wrap\",\n                wordWrap: \"break-word\"\n              }}\n              dangerouslySetInnerHTML={{ __html: highlightedSnippet }}\n            ></pre>\n            <FiCopy\n              style={{\n                cursor: \"pointer\",\n                position: \"absolute\",\n                right: \"8px\",\n                top: \"8px\",\n                color: \"#0078d4\",\n                fontSize: \"1.2rem\"\n              }}\n              onClick={() => {\n                navigator.clipboard.writeText(cleanedSnippet);\n              }}\n            />\n          </div>\n        );\n      } else {\n        return (\n          <span key={index}>\n            {snippet.split(\"\\n\").map((line, i) => (\n              <React.Fragment key={i}>\n                {line}\n                <br />\n              </React.Fragment>\n            ))}\n          </span>\n        );\n      }\n    });\n  };\n\n  const clearChat = () => {\n    setChatMessages([]);\n  };\n\n  const theme = getTheme();\n  const classNames = mergeStyleSets({\n    title: {\n      fontWeight: \"bold\",\n      fontSize: \"2rem\",\n      color: theme.palette.themePrimary\n    },\n    inputContainer: {\n      width: \"100%\",\n      display: \"flex\",\n      alignItems: \"center\"\n    },\n    inputBox: {\n      flexGrow: 1,\n      marginRight: \"8px\"\n    }\n  });\n\n  return (\n    <Stack\n      horizontalAlign=\"center\"\n      verticalAlign=\"center\"\n      verticalFill\n      styles={{\n        root: {\n          width: \"100%\",\n          height: \"100vh\",\n          margin: \"0 auto\",\n          textAlign: \"left\",\n          color: \"#605e5c\",\n          background: \"#f3f2f1\"\n        }\n      }}\n      gap={15}\n    >\n      <Text className={classNames.title}>Ultron</Text>\n\n      <Stack.Item>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            height: \"70vh\",\n            overflow: \"auto\"\n          }}\n          ref={chatContainerRef}\n        >\n          {chatMessages.map((message, index) => (\n            <div\n              key={index}\n              style={{\n                display: \"flex\",\n                justifyContent: message.isBot ? \"flex-start\" : \"flex-end\",\n                marginBottom: \"8px\"\n              }}\n            >\n              <Stack\n                styles={{\n                  root: {\n                    backgroundColor: message.isBot ? \"#e1dfdd\" : \"transparrent\",\n                    padding: \"8px\",\n                    borderRadius: \"5px\"\n                  }\n                }}\n              >\n                <Text>{formatMessage(message.message)}</Text>\n              </Stack>\n            </div>\n          ))}\n        </div>\n      </Stack.Item>\n\n      <Stack horizontal gap={15} styles={{ root: { width: \"100%\" } }}>\n        <FiTrash2\n          style={{\n            cursor: \"pointer\",\n            fontSize: \"1.5rem\",\n            color: theme.palette.redDark,\n            alignSelf: \"center\"\n          }}\n          onClick={clearChat}\n        />\n        <TextField\n          className={classNames.inputBox}\n          value={userMessage}\n          onChange={handleUserMessageChange}\n          autoComplete=\"off\"\n          autoFocus\n          multiline\n          resizable={false}\n          underlined\n          placeholder=\"Type...\"\n        />\n        <FiSend\n          style={{\n            cursor: \"pointer\",\n            fontSize: \"1.5rem\",\n            color: theme.palette.themePrimary,\n            alignSelf: \"center\"\n          }}\n          onClick={handleSendMessage}\n        />\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default Chat;\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport Chat from \"./Chat\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <Chat />\n  </StrictMode>\n);\n"],"sourceRoot":""}